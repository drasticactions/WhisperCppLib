// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace WhisperCppLib
{
    internal static unsafe partial class NativeMethods
    {
        const string __DllName = "whisper";



        [DllImport(__DllName, EntryPoint = "renameat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int renameat(int arg1, byte* arg2, int arg3, byte* arg4);

        [DllImport(__DllName, EntryPoint = "renamex_np", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int renamex_np(byte* arg1, byte* arg2, uint arg3);

        [DllImport(__DllName, EntryPoint = "renameatx_np", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int renameatx_np(int arg1, byte* arg2, int arg3, byte* arg4, uint arg5);

        [DllImport(__DllName, EntryPoint = "clearerr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void clearerr(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "fclose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fclose(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "feof", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int feof(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "ferror", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ferror(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "fflush", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fflush(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "fgetc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fgetc(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "fgetpos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fgetpos(__sFILE* arg1, long* arg2);

        [DllImport(__DllName, EntryPoint = "fgets", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* fgets(byte* arg1, int arg2, __sFILE* arg3);

        [DllImport(__DllName, EntryPoint = "fopen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern __sFILE* fopen(byte* __filename, byte* __mode);

        [DllImport(__DllName, EntryPoint = "fprintf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fprintf(__sFILE* arg1, byte* arg2);

        [DllImport(__DllName, EntryPoint = "fputc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fputc(int arg1, __sFILE* arg2);

        [DllImport(__DllName, EntryPoint = "fputs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fputs(byte* arg1, __sFILE* arg2);

        [DllImport(__DllName, EntryPoint = "fread", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CULong fread(void* __ptr, CULong __size, CULong __nitems, __sFILE* __stream);

        [DllImport(__DllName, EntryPoint = "freopen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern __sFILE* freopen(byte* arg1, byte* arg2, __sFILE* arg3);

        [DllImport(__DllName, EntryPoint = "fscanf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fscanf(__sFILE* arg1, byte* arg2);

        [DllImport(__DllName, EntryPoint = "fseek", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fseek(__sFILE* arg1, CLong arg2, int arg3);

        [DllImport(__DllName, EntryPoint = "fsetpos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fsetpos(__sFILE* arg1, long* arg2);

        [DllImport(__DllName, EntryPoint = "ftell", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CLong ftell(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "fwrite", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CULong fwrite(void* __ptr, CULong __size, CULong __nitems, __sFILE* __stream);

        [DllImport(__DllName, EntryPoint = "getc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int getc(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "getchar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int getchar();

        [DllImport(__DllName, EntryPoint = "gets", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* gets(byte* arg1);

        [DllImport(__DllName, EntryPoint = "perror", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void perror(byte* arg1);

        [DllImport(__DllName, EntryPoint = "printf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int printf(byte* arg1);

        [DllImport(__DllName, EntryPoint = "putc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int putc(int arg1, __sFILE* arg2);

        [DllImport(__DllName, EntryPoint = "putchar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int putchar(int arg1);

        [DllImport(__DllName, EntryPoint = "puts", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int puts(byte* arg1);

        [DllImport(__DllName, EntryPoint = "remove", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int remove(byte* arg1);

        [DllImport(__DllName, EntryPoint = "rename", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int rename(byte* __old, byte* __new);

        [DllImport(__DllName, EntryPoint = "rewind", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void rewind(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "scanf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int scanf(byte* arg1);

        [DllImport(__DllName, EntryPoint = "setbuf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void setbuf(__sFILE* arg1, byte* arg2);

        [DllImport(__DllName, EntryPoint = "setvbuf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int setvbuf(__sFILE* arg1, byte* arg2, int arg3, nuint arg4);

        [DllImport(__DllName, EntryPoint = "sprintf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int sprintf(byte* arg1, byte* arg2);

        [DllImport(__DllName, EntryPoint = "sscanf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int sscanf(byte* arg1, byte* arg2);

        [DllImport(__DllName, EntryPoint = "tmpfile", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern __sFILE* tmpfile();

        [DllImport(__DllName, EntryPoint = "tmpnam", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* tmpnam(byte* arg1);

        [DllImport(__DllName, EntryPoint = "ungetc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ungetc(int arg1, __sFILE* arg2);

        [DllImport(__DllName, EntryPoint = "vfprintf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int vfprintf(__sFILE* arg1, byte* arg2, byte* arg3);

        [DllImport(__DllName, EntryPoint = "vprintf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int vprintf(byte* arg1, byte* arg2);

        [DllImport(__DllName, EntryPoint = "vsprintf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int vsprintf(byte* arg1, byte* arg2, byte* arg3);

        [DllImport(__DllName, EntryPoint = "ctermid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* ctermid(byte* arg1);

        [DllImport(__DllName, EntryPoint = "fdopen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern __sFILE* fdopen(int arg1, byte* arg2);

        [DllImport(__DllName, EntryPoint = "fileno", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fileno(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "pclose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int pclose(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "popen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern __sFILE* popen(byte* arg1, byte* arg2);

        [DllImport(__DllName, EntryPoint = "flockfile", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void flockfile(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "ftrylockfile", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ftrylockfile(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "funlockfile", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void funlockfile(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "getc_unlocked", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int getc_unlocked(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "getchar_unlocked", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int getchar_unlocked();

        [DllImport(__DllName, EntryPoint = "putc_unlocked", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int putc_unlocked(int arg1, __sFILE* arg2);

        [DllImport(__DllName, EntryPoint = "putchar_unlocked", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int putchar_unlocked(int arg1);

        [DllImport(__DllName, EntryPoint = "getw", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int getw(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "putw", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int putw(int arg1, __sFILE* arg2);

        [DllImport(__DllName, EntryPoint = "tempnam", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* tempnam(byte* __dir, byte* __prefix);

        [DllImport(__DllName, EntryPoint = "fseeko", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fseeko(__sFILE* __stream, long __offset, int __whence);

        [DllImport(__DllName, EntryPoint = "ftello", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long ftello(__sFILE* __stream);

        [DllImport(__DllName, EntryPoint = "snprintf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int snprintf(byte* __str, CULong __size, byte* __format);

        [DllImport(__DllName, EntryPoint = "vfscanf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int vfscanf(__sFILE* __stream, byte* __format, byte* arg1);

        [DllImport(__DllName, EntryPoint = "vscanf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int vscanf(byte* __format, byte* arg1);

        [DllImport(__DllName, EntryPoint = "vsnprintf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int vsnprintf(byte* __str, CULong __size, byte* __format, byte* arg1);

        [DllImport(__DllName, EntryPoint = "vsscanf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int vsscanf(byte* __str, byte* __format, byte* arg1);

        [DllImport(__DllName, EntryPoint = "dprintf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int dprintf(int arg1, byte* arg2);

        [DllImport(__DllName, EntryPoint = "vdprintf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int vdprintf(int arg1, byte* arg2, byte* arg3);

        [DllImport(__DllName, EntryPoint = "getdelim", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nint getdelim(byte** __linep, nuint* __linecapp, int __delimiter, __sFILE* __stream);

        [DllImport(__DllName, EntryPoint = "getline", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nint getline(byte** __linep, nuint* __linecapp, __sFILE* __stream);

        [DllImport(__DllName, EntryPoint = "fmemopen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern __sFILE* fmemopen(void* __buf, nuint __size, byte* __mode);

        [DllImport(__DllName, EntryPoint = "open_memstream", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern __sFILE* open_memstream(byte** __bufp, nuint* __sizep);

        [DllImport(__DllName, EntryPoint = "asprintf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int asprintf(byte** arg1, byte* arg2);

        [DllImport(__DllName, EntryPoint = "ctermid_r", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* ctermid_r(byte* arg1);

        [DllImport(__DllName, EntryPoint = "fgetln", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* fgetln(__sFILE* arg1, nuint* arg2);

        [DllImport(__DllName, EntryPoint = "fmtcheck", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* fmtcheck(byte* arg1, byte* arg2);

        [DllImport(__DllName, EntryPoint = "fpurge", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fpurge(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "setbuffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void setbuffer(__sFILE* arg1, byte* arg2, int arg3);

        [DllImport(__DllName, EntryPoint = "setlinebuf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int setlinebuf(__sFILE* arg1);

        [DllImport(__DllName, EntryPoint = "vasprintf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int vasprintf(byte** arg1, byte* arg2, byte* arg3);

        [DllImport(__DllName, EntryPoint = "funopen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern __sFILE* funopen(void* arg1, delegate* unmanaged[Cdecl]<void*, byte*, int, int> arg2, delegate* unmanaged[Cdecl]<void*, byte*, int, int> arg3, delegate* unmanaged[Cdecl]<void*, long, int, long> arg4, delegate* unmanaged[Cdecl]<void*, int> arg5);

        [DllImport(__DllName, EntryPoint = "ggml_status_to_string", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* ggml_status_to_string(int status);

        [DllImport(__DllName, EntryPoint = "ggml_fp16_to_fp32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float ggml_fp16_to_fp32(ushort x);

        [DllImport(__DllName, EntryPoint = "ggml_fp32_to_fp16", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort ggml_fp32_to_fp16(float x);

        [DllImport(__DllName, EntryPoint = "ggml_fp16_to_fp32_row", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_fp16_to_fp32_row(ushort* x, float* y, int n);

        [DllImport(__DllName, EntryPoint = "ggml_fp32_to_fp16_row", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_fp32_to_fp16_row(float* x, ushort* y, int n);

        [DllImport(__DllName, EntryPoint = "ggml_guid_matches", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool ggml_guid_matches(void/* byte[] */* guid_a, void/* byte[] */* guid_b);

        [DllImport(__DllName, EntryPoint = "ggml_time_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_time_init();

        [DllImport(__DllName, EntryPoint = "ggml_time_ms", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long ggml_time_ms();

        [DllImport(__DllName, EntryPoint = "ggml_time_us", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long ggml_time_us();

        [DllImport(__DllName, EntryPoint = "ggml_cycles", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long ggml_cycles();

        [DllImport(__DllName, EntryPoint = "ggml_cycles_per_ms", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long ggml_cycles_per_ms();

        [DllImport(__DllName, EntryPoint = "ggml_print_backtrace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_print_backtrace();

        [DllImport(__DllName, EntryPoint = "ggml_fopen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern __sFILE* ggml_fopen(byte* fname, byte* mode);

        [DllImport(__DllName, EntryPoint = "ggml_numa_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_numa_init(uint numa);

        [DllImport(__DllName, EntryPoint = "ggml_is_numa", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool ggml_is_numa();

        [DllImport(__DllName, EntryPoint = "ggml_print_object", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_print_object(ggml_object* obj);

        [DllImport(__DllName, EntryPoint = "ggml_print_objects", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_print_objects(ggml_context* ctx);

        [DllImport(__DllName, EntryPoint = "ggml_nelements", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long ggml_nelements(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_nrows", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long ggml_nrows(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_nbytes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint ggml_nbytes(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_nbytes_pad", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint ggml_nbytes_pad(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_blck_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_blck_size(uint type_);

        [DllImport(__DllName, EntryPoint = "ggml_type_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint ggml_type_size(uint type_);

        [DllImport(__DllName, EntryPoint = "ggml_row_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint ggml_row_size(uint type_, long ne);

        [DllImport(__DllName, EntryPoint = "ggml_type_sizef", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double ggml_type_sizef(uint type_);

        [DllImport(__DllName, EntryPoint = "ggml_type_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* ggml_type_name(uint type_);

        [DllImport(__DllName, EntryPoint = "ggml_op_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* ggml_op_name(uint op);

        [DllImport(__DllName, EntryPoint = "ggml_op_symbol", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* ggml_op_symbol(uint op);

        [DllImport(__DllName, EntryPoint = "ggml_unary_op_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* ggml_unary_op_name(uint op);

        [DllImport(__DllName, EntryPoint = "ggml_op_desc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* ggml_op_desc(ggml_tensor* t);

        [DllImport(__DllName, EntryPoint = "ggml_element_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint ggml_element_size(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_is_quantized", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool ggml_is_quantized(uint type_);

        [DllImport(__DllName, EntryPoint = "ggml_ftype_to_ggml_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint ggml_ftype_to_ggml_type(int ftype);

        [DllImport(__DllName, EntryPoint = "ggml_is_transposed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool ggml_is_transposed(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_is_contiguous", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool ggml_is_contiguous(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_is_permuted", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool ggml_is_permuted(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_is_empty", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool ggml_is_empty(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_is_scalar", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool ggml_is_scalar(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_is_vector", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool ggml_is_vector(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_is_matrix", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool ggml_is_matrix(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_is_3d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool ggml_is_3d(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_n_dims", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_n_dims(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_are_same_shape", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool ggml_are_same_shape(ggml_tensor* t0, ggml_tensor* t1);

        [DllImport(__DllName, EntryPoint = "ggml_tensor_overhead", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint ggml_tensor_overhead();

        [DllImport(__DllName, EntryPoint = "ggml_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_context* ggml_init(ggml_init_params @params);

        [DllImport(__DllName, EntryPoint = "ggml_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_free(ggml_context* ctx);

        [DllImport(__DllName, EntryPoint = "ggml_used_mem", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint ggml_used_mem(ggml_context* ctx);

        [DllImport(__DllName, EntryPoint = "ggml_set_scratch", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint ggml_set_scratch(ggml_context* ctx, ggml_scratch scratch);

        [DllImport(__DllName, EntryPoint = "ggml_get_no_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool ggml_get_no_alloc(ggml_context* ctx);

        [DllImport(__DllName, EntryPoint = "ggml_set_no_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_set_no_alloc(ggml_context* ctx, [MarshalAs(UnmanagedType.U1)] bool no_alloc);

        [DllImport(__DllName, EntryPoint = "ggml_get_mem_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* ggml_get_mem_buffer(ggml_context* ctx);

        [DllImport(__DllName, EntryPoint = "ggml_get_mem_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint ggml_get_mem_size(ggml_context* ctx);

        [DllImport(__DllName, EntryPoint = "ggml_get_max_tensor_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint ggml_get_max_tensor_size(ggml_context* ctx);

        [DllImport(__DllName, EntryPoint = "ggml_new_tensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_new_tensor(ggml_context* ctx, uint type_, int n_dims, long* ne);

        [DllImport(__DllName, EntryPoint = "ggml_new_tensor_1d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_new_tensor_1d(ggml_context* ctx, uint type_, long ne0);

        [DllImport(__DllName, EntryPoint = "ggml_new_tensor_2d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_new_tensor_2d(ggml_context* ctx, uint type_, long ne0, long ne1);

        [DllImport(__DllName, EntryPoint = "ggml_new_tensor_3d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_new_tensor_3d(ggml_context* ctx, uint type_, long ne0, long ne1, long ne2);

        [DllImport(__DllName, EntryPoint = "ggml_new_tensor_4d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_new_tensor_4d(ggml_context* ctx, uint type_, long ne0, long ne1, long ne2, long ne3);

        [DllImport(__DllName, EntryPoint = "ggml_new_i32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_new_i32(ggml_context* ctx, int value);

        [DllImport(__DllName, EntryPoint = "ggml_new_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_new_f32(ggml_context* ctx, float value);

        [DllImport(__DllName, EntryPoint = "ggml_dup_tensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_dup_tensor(ggml_context* ctx, ggml_tensor* src);

        [DllImport(__DllName, EntryPoint = "ggml_view_tensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_view_tensor(ggml_context* ctx, ggml_tensor* src);

        [DllImport(__DllName, EntryPoint = "ggml_get_first_tensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_get_first_tensor(ggml_context* ctx);

        [DllImport(__DllName, EntryPoint = "ggml_get_next_tensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_get_next_tensor(ggml_context* ctx, ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_get_tensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_get_tensor(ggml_context* ctx, byte* name);

        [DllImport(__DllName, EntryPoint = "ggml_set_zero", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_set_zero(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_set_i32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_set_i32(ggml_tensor* tensor, int value);

        [DllImport(__DllName, EntryPoint = "ggml_set_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_set_f32(ggml_tensor* tensor, float value);

        [DllImport(__DllName, EntryPoint = "ggml_unravel_index", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_unravel_index(ggml_tensor* tensor, long i, long* i0, long* i1, long* i2, long* i3);

        [DllImport(__DllName, EntryPoint = "ggml_get_i32_1d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_get_i32_1d(ggml_tensor* tensor, int i);

        [DllImport(__DllName, EntryPoint = "ggml_set_i32_1d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_set_i32_1d(ggml_tensor* tensor, int i, int value);

        [DllImport(__DllName, EntryPoint = "ggml_get_i32_nd", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_get_i32_nd(ggml_tensor* tensor, int i0, int i1, int i2, int i3);

        [DllImport(__DllName, EntryPoint = "ggml_set_i32_nd", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_set_i32_nd(ggml_tensor* tensor, int i0, int i1, int i2, int i3, int value);

        [DllImport(__DllName, EntryPoint = "ggml_get_f32_1d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float ggml_get_f32_1d(ggml_tensor* tensor, int i);

        [DllImport(__DllName, EntryPoint = "ggml_set_f32_1d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_set_f32_1d(ggml_tensor* tensor, int i, float value);

        [DllImport(__DllName, EntryPoint = "ggml_get_f32_nd", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float ggml_get_f32_nd(ggml_tensor* tensor, int i0, int i1, int i2, int i3);

        [DllImport(__DllName, EntryPoint = "ggml_set_f32_nd", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_set_f32_nd(ggml_tensor* tensor, int i0, int i1, int i2, int i3, float value);

        [DllImport(__DllName, EntryPoint = "ggml_get_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* ggml_get_data(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_get_data_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float* ggml_get_data_f32(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_get_unary_op", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint ggml_get_unary_op(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_get_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* ggml_get_name(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_set_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_set_name(ggml_tensor* tensor, byte* name);

        [DllImport(__DllName, EntryPoint = "ggml_format_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_format_name(ggml_tensor* tensor, byte* fmt);

        [DllImport(__DllName, EntryPoint = "ggml_dup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_dup(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_dup_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_dup_inplace(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_add", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_add(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_add_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_add_inplace(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_add_cast", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_add_cast(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, uint type_);

        [DllImport(__DllName, EntryPoint = "ggml_add1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_add1(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_add1_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_add1_inplace(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_acc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_acc(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, nuint nb1, nuint nb2, nuint nb3, nuint offset);

        [DllImport(__DllName, EntryPoint = "ggml_acc_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_acc_inplace(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, nuint nb1, nuint nb2, nuint nb3, nuint offset);

        [DllImport(__DllName, EntryPoint = "ggml_sub", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_sub(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_sub_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_sub_inplace(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_mul", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_mul(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_mul_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_mul_inplace(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_div", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_div(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_div_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_div_inplace(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_sqr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_sqr(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_sqr_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_sqr_inplace(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_sqrt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_sqrt(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_sqrt_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_sqrt_inplace(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_log", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_log(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_log_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_log_inplace(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_sum", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_sum(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_sum_rows", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_sum_rows(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_mean", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_mean(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_argmax", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_argmax(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_repeat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_repeat(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_repeat_back", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_repeat_back(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_concat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_concat(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_abs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_abs(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_abs_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_abs_inplace(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_sgn", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_sgn(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_sgn_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_sgn_inplace(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_neg", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_neg(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_neg_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_neg_inplace(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_step", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_step(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_step_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_step_inplace(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_tanh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_tanh(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_tanh_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_tanh_inplace(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_elu", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_elu(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_elu_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_elu_inplace(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_relu", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_relu(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_leaky_relu", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_leaky_relu(ggml_context* ctx, ggml_tensor* a, float negative_slope, [MarshalAs(UnmanagedType.U1)] bool inplace);

        [DllImport(__DllName, EntryPoint = "ggml_relu_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_relu_inplace(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_gelu", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_gelu(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_gelu_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_gelu_inplace(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_gelu_quick", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_gelu_quick(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_gelu_quick_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_gelu_quick_inplace(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_silu", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_silu(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_silu_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_silu_inplace(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_silu_back", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_silu_back(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_hardswish", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_hardswish(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_hardsigmoid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_hardsigmoid(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_norm", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_norm(ggml_context* ctx, ggml_tensor* a, float eps);

        [DllImport(__DllName, EntryPoint = "ggml_norm_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_norm_inplace(ggml_context* ctx, ggml_tensor* a, float eps);

        [DllImport(__DllName, EntryPoint = "ggml_rms_norm", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_rms_norm(ggml_context* ctx, ggml_tensor* a, float eps);

        [DllImport(__DllName, EntryPoint = "ggml_rms_norm_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_rms_norm_inplace(ggml_context* ctx, ggml_tensor* a, float eps);

        [DllImport(__DllName, EntryPoint = "ggml_group_norm", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_group_norm(ggml_context* ctx, ggml_tensor* a, int n_groups);

        [DllImport(__DllName, EntryPoint = "ggml_group_norm_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_group_norm_inplace(ggml_context* ctx, ggml_tensor* a, int n_groups);

        [DllImport(__DllName, EntryPoint = "ggml_rms_norm_back", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_rms_norm_back(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, float eps);

        [DllImport(__DllName, EntryPoint = "ggml_mul_mat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_mul_mat(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_mul_mat_set_prec", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_mul_mat_set_prec(ggml_tensor* a, uint prec);

        [DllImport(__DllName, EntryPoint = "ggml_mul_mat_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_mul_mat_id(ggml_context* ctx, ggml_tensor** as_, int n_as, ggml_tensor* ids, int id, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_out_prod", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_out_prod(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_scale", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_scale(ggml_context* ctx, ggml_tensor* a, float s);

        [DllImport(__DllName, EntryPoint = "ggml_scale_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_scale_inplace(ggml_context* ctx, ggml_tensor* a, float s);

        [DllImport(__DllName, EntryPoint = "ggml_set", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_set(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, nuint nb1, nuint nb2, nuint nb3, nuint offset);

        [DllImport(__DllName, EntryPoint = "ggml_set_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_set_inplace(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, nuint nb1, nuint nb2, nuint nb3, nuint offset);

        [DllImport(__DllName, EntryPoint = "ggml_set_1d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_set_1d(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, nuint offset);

        [DllImport(__DllName, EntryPoint = "ggml_set_1d_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_set_1d_inplace(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, nuint offset);

        [DllImport(__DllName, EntryPoint = "ggml_set_2d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_set_2d(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, nuint nb1, nuint offset);

        [DllImport(__DllName, EntryPoint = "ggml_set_2d_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_set_2d_inplace(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, nuint nb1, nuint offset);

        [DllImport(__DllName, EntryPoint = "ggml_cpy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_cpy(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_cast", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_cast(ggml_context* ctx, ggml_tensor* a, uint type_);

        [DllImport(__DllName, EntryPoint = "ggml_cont", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_cont(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_cont_1d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_cont_1d(ggml_context* ctx, ggml_tensor* a, long ne0);

        [DllImport(__DllName, EntryPoint = "ggml_cont_2d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_cont_2d(ggml_context* ctx, ggml_tensor* a, long ne0, long ne1);

        [DllImport(__DllName, EntryPoint = "ggml_cont_3d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_cont_3d(ggml_context* ctx, ggml_tensor* a, long ne0, long ne1, long ne2);

        [DllImport(__DllName, EntryPoint = "ggml_cont_4d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_cont_4d(ggml_context* ctx, ggml_tensor* a, long ne0, long ne1, long ne2, long ne3);

        [DllImport(__DllName, EntryPoint = "ggml_reshape", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_reshape(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_reshape_1d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_reshape_1d(ggml_context* ctx, ggml_tensor* a, long ne0);

        [DllImport(__DllName, EntryPoint = "ggml_reshape_2d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_reshape_2d(ggml_context* ctx, ggml_tensor* a, long ne0, long ne1);

        [DllImport(__DllName, EntryPoint = "ggml_reshape_3d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_reshape_3d(ggml_context* ctx, ggml_tensor* a, long ne0, long ne1, long ne2);

        [DllImport(__DllName, EntryPoint = "ggml_reshape_4d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_reshape_4d(ggml_context* ctx, ggml_tensor* a, long ne0, long ne1, long ne2, long ne3);

        [DllImport(__DllName, EntryPoint = "ggml_view_1d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_view_1d(ggml_context* ctx, ggml_tensor* a, long ne0, nuint offset);

        [DllImport(__DllName, EntryPoint = "ggml_view_2d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_view_2d(ggml_context* ctx, ggml_tensor* a, long ne0, long ne1, nuint nb1, nuint offset);

        [DllImport(__DllName, EntryPoint = "ggml_view_3d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_view_3d(ggml_context* ctx, ggml_tensor* a, long ne0, long ne1, long ne2, nuint nb1, nuint nb2, nuint offset);

        [DllImport(__DllName, EntryPoint = "ggml_view_4d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_view_4d(ggml_context* ctx, ggml_tensor* a, long ne0, long ne1, long ne2, long ne3, nuint nb1, nuint nb2, nuint nb3, nuint offset);

        [DllImport(__DllName, EntryPoint = "ggml_permute", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_permute(ggml_context* ctx, ggml_tensor* a, int axis0, int axis1, int axis2, int axis3);

        [DllImport(__DllName, EntryPoint = "ggml_transpose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_transpose(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_get_rows", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_get_rows(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_get_rows_back", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_get_rows_back(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, ggml_tensor* c);

        [DllImport(__DllName, EntryPoint = "ggml_diag", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_diag(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_diag_mask_inf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_diag_mask_inf(ggml_context* ctx, ggml_tensor* a, int n_past);

        [DllImport(__DllName, EntryPoint = "ggml_diag_mask_inf_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_diag_mask_inf_inplace(ggml_context* ctx, ggml_tensor* a, int n_past);

        [DllImport(__DllName, EntryPoint = "ggml_diag_mask_zero", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_diag_mask_zero(ggml_context* ctx, ggml_tensor* a, int n_past);

        [DllImport(__DllName, EntryPoint = "ggml_diag_mask_zero_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_diag_mask_zero_inplace(ggml_context* ctx, ggml_tensor* a, int n_past);

        [DllImport(__DllName, EntryPoint = "ggml_soft_max", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_soft_max(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_soft_max_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_soft_max_inplace(ggml_context* ctx, ggml_tensor* a);

        [DllImport(__DllName, EntryPoint = "ggml_soft_max_ext", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_soft_max_ext(ggml_context* ctx, ggml_tensor* a, ggml_tensor* mask, ggml_tensor* pos, float scale, float max_bias);

        [DllImport(__DllName, EntryPoint = "ggml_soft_max_back", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_soft_max_back(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_soft_max_back_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_soft_max_back_inplace(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_rope", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_rope(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, int n_dims, int mode, int n_ctx);

        [DllImport(__DllName, EntryPoint = "ggml_rope_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_rope_inplace(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, int n_dims, int mode, int n_ctx);

        [DllImport(__DllName, EntryPoint = "ggml_rope_custom", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_rope_custom(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, int n_dims, int mode, int n_ctx, int n_orig_ctx, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow);

        [DllImport(__DllName, EntryPoint = "ggml_rope_custom_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_rope_custom_inplace(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, int n_dims, int mode, int n_ctx, int n_orig_ctx, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow);

        [DllImport(__DllName, EntryPoint = "ggml_rope_yarn_corr_dims", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_rope_yarn_corr_dims(int n_dims, int n_orig_ctx, float freq_base, float beta_fast, float beta_slow, float* dims);

        [DllImport(__DllName, EntryPoint = "ggml_rope_xpos_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_rope_xpos_inplace(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, int n_dims, float @base, [MarshalAs(UnmanagedType.U1)] bool down);

        [DllImport(__DllName, EntryPoint = "ggml_rope_back", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_rope_back(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, int n_dims, int mode, int n_ctx, int n_orig_ctx, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow, float xpos_base, [MarshalAs(UnmanagedType.U1)] bool xpos_down);

        [DllImport(__DllName, EntryPoint = "ggml_alibi", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_alibi(ggml_context* ctx, ggml_tensor* a, int n_past, int n_head, float bias_max);

        [DllImport(__DllName, EntryPoint = "ggml_clamp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_clamp(ggml_context* ctx, ggml_tensor* a, float min, float max);

        [DllImport(__DllName, EntryPoint = "ggml_im2col", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_im2col(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, int s0, int s1, int p0, int p1, int d0, int d1, [MarshalAs(UnmanagedType.U1)] bool is_2D, uint dst_type);

        [DllImport(__DllName, EntryPoint = "ggml_conv_depthwise_2d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_conv_depthwise_2d(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, int s0, int s1, int p0, int p1, int d0, int d1);

        [DllImport(__DllName, EntryPoint = "ggml_conv_1d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_conv_1d(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, int s0, int p0, int d0);

        [DllImport(__DllName, EntryPoint = "ggml_conv_1d_ph", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_conv_1d_ph(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, int s, int d);

        [DllImport(__DllName, EntryPoint = "ggml_conv_transpose_1d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_conv_transpose_1d(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, int s0, int p0, int d0);

        [DllImport(__DllName, EntryPoint = "ggml_conv_2d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_conv_2d(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, int s0, int s1, int p0, int p1, int d0, int d1);

        [DllImport(__DllName, EntryPoint = "ggml_conv_2d_sk_p0", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_conv_2d_sk_p0(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_conv_2d_s1_ph", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_conv_2d_s1_ph(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_conv_transpose_2d_p0", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_conv_transpose_2d_p0(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, int stride);

        [DllImport(__DllName, EntryPoint = "ggml_pool_1d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_pool_1d(ggml_context* ctx, ggml_tensor* a, uint op, int k0, int s0, int p0);

        [DllImport(__DllName, EntryPoint = "ggml_pool_2d", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_pool_2d(ggml_context* ctx, ggml_tensor* a, uint op, int k0, int k1, int s0, int s1, float p0, float p1);

        [DllImport(__DllName, EntryPoint = "ggml_upscale", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_upscale(ggml_context* ctx, ggml_tensor* a, int scale_factor);

        [DllImport(__DllName, EntryPoint = "ggml_pad", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_pad(ggml_context* ctx, ggml_tensor* a, int p0, int p1, int p2, int p3);

        [DllImport(__DllName, EntryPoint = "ggml_timestep_embedding", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_timestep_embedding(ggml_context* ctx, ggml_tensor* timesteps, int dim, int max_period);

        [DllImport(__DllName, EntryPoint = "ggml_argsort", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_argsort(ggml_context* ctx, ggml_tensor* a, uint order);

        [DllImport(__DllName, EntryPoint = "ggml_arange", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_arange(ggml_context* ctx, float start, float stop, float step);

        [DllImport(__DllName, EntryPoint = "ggml_top_k", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_top_k(ggml_context* ctx, ggml_tensor* a, int k);

        [DllImport(__DllName, EntryPoint = "ggml_flash_attn", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_flash_attn(ggml_context* ctx, ggml_tensor* q, ggml_tensor* k, ggml_tensor* v, [MarshalAs(UnmanagedType.U1)] bool masked);

        [DllImport(__DllName, EntryPoint = "ggml_flash_attn_back", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_flash_attn_back(ggml_context* ctx, ggml_tensor* q, ggml_tensor* k, ggml_tensor* v, ggml_tensor* d, [MarshalAs(UnmanagedType.U1)] bool masked);

        [DllImport(__DllName, EntryPoint = "ggml_flash_ff", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_flash_ff(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b0, ggml_tensor* b1, ggml_tensor* c0, ggml_tensor* c1);

        [DllImport(__DllName, EntryPoint = "ggml_ssm_conv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_ssm_conv(ggml_context* ctx, ggml_tensor* s, ggml_tensor* x, ggml_tensor* c, ggml_tensor* sq);

        [DllImport(__DllName, EntryPoint = "ggml_ssm_scan", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_ssm_scan(ggml_context* ctx, ggml_tensor* s, ggml_tensor* x, ggml_tensor* dt, ggml_tensor* A, ggml_tensor* B, ggml_tensor* C, ggml_tensor* sq);

        [DllImport(__DllName, EntryPoint = "ggml_win_part", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_win_part(ggml_context* ctx, ggml_tensor* a, int w);

        [DllImport(__DllName, EntryPoint = "ggml_win_unpart", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_win_unpart(ggml_context* ctx, ggml_tensor* a, int w0, int h0, int w);

        [DllImport(__DllName, EntryPoint = "ggml_unary", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_unary(ggml_context* ctx, ggml_tensor* a, uint op);

        [DllImport(__DllName, EntryPoint = "ggml_unary_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_unary_inplace(ggml_context* ctx, ggml_tensor* a, uint op);

        [DllImport(__DllName, EntryPoint = "ggml_get_rel_pos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_get_rel_pos(ggml_context* ctx, ggml_tensor* a, int qh, int kh);

        [DllImport(__DllName, EntryPoint = "ggml_add_rel_pos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_add_rel_pos(ggml_context* ctx, ggml_tensor* a, ggml_tensor* pw, ggml_tensor* ph);

        [DllImport(__DllName, EntryPoint = "ggml_add_rel_pos_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_add_rel_pos_inplace(ggml_context* ctx, ggml_tensor* a, ggml_tensor* pw, ggml_tensor* ph);

        [DllImport(__DllName, EntryPoint = "ggml_map_unary_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_map_unary_f32(ggml_context* ctx, ggml_tensor* a, delegate* unmanaged[Cdecl]<int, float*, float*, void> fun);

        [DllImport(__DllName, EntryPoint = "ggml_map_unary_inplace_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_map_unary_inplace_f32(ggml_context* ctx, ggml_tensor* a, delegate* unmanaged[Cdecl]<int, float*, float*, void> fun);

        [DllImport(__DllName, EntryPoint = "ggml_map_binary_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_map_binary_f32(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, delegate* unmanaged[Cdecl]<int, float*, float*, float*, void> fun);

        [DllImport(__DllName, EntryPoint = "ggml_map_binary_inplace_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_map_binary_inplace_f32(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, delegate* unmanaged[Cdecl]<int, float*, float*, float*, void> fun);

        [DllImport(__DllName, EntryPoint = "ggml_map_custom1_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_map_custom1_f32(ggml_context* ctx, ggml_tensor* a, delegate* unmanaged[Cdecl]<ggml_tensor*, ggml_tensor*, void> fun);

        [DllImport(__DllName, EntryPoint = "ggml_map_custom1_inplace_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_map_custom1_inplace_f32(ggml_context* ctx, ggml_tensor* a, delegate* unmanaged[Cdecl]<ggml_tensor*, ggml_tensor*, void> fun);

        [DllImport(__DllName, EntryPoint = "ggml_map_custom2_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_map_custom2_f32(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, delegate* unmanaged[Cdecl]<ggml_tensor*, ggml_tensor*, ggml_tensor*, void> fun);

        [DllImport(__DllName, EntryPoint = "ggml_map_custom2_inplace_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_map_custom2_inplace_f32(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, delegate* unmanaged[Cdecl]<ggml_tensor*, ggml_tensor*, ggml_tensor*, void> fun);

        [DllImport(__DllName, EntryPoint = "ggml_map_custom3_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_map_custom3_f32(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, ggml_tensor* c, delegate* unmanaged[Cdecl]<ggml_tensor*, ggml_tensor*, ggml_tensor*, ggml_tensor*, void> fun);

        [DllImport(__DllName, EntryPoint = "ggml_map_custom3_inplace_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_map_custom3_inplace_f32(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, ggml_tensor* c, delegate* unmanaged[Cdecl]<ggml_tensor*, ggml_tensor*, ggml_tensor*, ggml_tensor*, void> fun);

        [DllImport(__DllName, EntryPoint = "ggml_map_custom1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_map_custom1(ggml_context* ctx, ggml_tensor* a, delegate* unmanaged[Cdecl]<ggml_tensor*, ggml_tensor*, int, int, void*, void> fun, int n_tasks, void* userdata);

        [DllImport(__DllName, EntryPoint = "ggml_map_custom1_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_map_custom1_inplace(ggml_context* ctx, ggml_tensor* a, delegate* unmanaged[Cdecl]<ggml_tensor*, ggml_tensor*, int, int, void*, void> fun, int n_tasks, void* userdata);

        [DllImport(__DllName, EntryPoint = "ggml_map_custom2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_map_custom2(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, delegate* unmanaged[Cdecl]<ggml_tensor*, ggml_tensor*, ggml_tensor*, int, int, void*, void> fun, int n_tasks, void* userdata);

        [DllImport(__DllName, EntryPoint = "ggml_map_custom2_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_map_custom2_inplace(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, delegate* unmanaged[Cdecl]<ggml_tensor*, ggml_tensor*, ggml_tensor*, int, int, void*, void> fun, int n_tasks, void* userdata);

        [DllImport(__DllName, EntryPoint = "ggml_map_custom3", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_map_custom3(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, ggml_tensor* c, delegate* unmanaged[Cdecl]<ggml_tensor*, ggml_tensor*, ggml_tensor*, ggml_tensor*, int, int, void*, void> fun, int n_tasks, void* userdata);

        [DllImport(__DllName, EntryPoint = "ggml_map_custom3_inplace", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_map_custom3_inplace(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, ggml_tensor* c, delegate* unmanaged[Cdecl]<ggml_tensor*, ggml_tensor*, ggml_tensor*, ggml_tensor*, int, int, void*, void> fun, int n_tasks, void* userdata);

        [DllImport(__DllName, EntryPoint = "ggml_cross_entropy_loss", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_cross_entropy_loss(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b);

        [DllImport(__DllName, EntryPoint = "ggml_cross_entropy_loss_back", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_cross_entropy_loss_back(ggml_context* ctx, ggml_tensor* a, ggml_tensor* b, ggml_tensor* c);

        [DllImport(__DllName, EntryPoint = "ggml_set_param", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_set_param(ggml_context* ctx, ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_build_forward_expand", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_build_forward_expand(ggml_cgraph* cgraph, ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_build_backward_expand", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_build_backward_expand(ggml_context* ctx, ggml_cgraph* gf, ggml_cgraph* gb, [MarshalAs(UnmanagedType.U1)] bool keep);

        [DllImport(__DllName, EntryPoint = "ggml_new_graph", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_cgraph* ggml_new_graph(ggml_context* ctx);

        [DllImport(__DllName, EntryPoint = "ggml_new_graph_custom", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_cgraph* ggml_new_graph_custom(ggml_context* ctx, nuint size, [MarshalAs(UnmanagedType.U1)] bool grads);

        [DllImport(__DllName, EntryPoint = "ggml_graph_dup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_cgraph* ggml_graph_dup(ggml_context* ctx, ggml_cgraph* cgraph);

        [DllImport(__DllName, EntryPoint = "ggml_graph_view", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_cgraph ggml_graph_view(ggml_cgraph* cgraph, int i0, int i1);

        [DllImport(__DllName, EntryPoint = "ggml_graph_cpy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_graph_cpy(ggml_cgraph* src, ggml_cgraph* dst);

        [DllImport(__DllName, EntryPoint = "ggml_graph_reset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_graph_reset(ggml_cgraph* cgraph);

        [DllImport(__DllName, EntryPoint = "ggml_graph_clear", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_graph_clear(ggml_cgraph* cgraph);

        [DllImport(__DllName, EntryPoint = "ggml_graph_overhead", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint ggml_graph_overhead();

        [DllImport(__DllName, EntryPoint = "ggml_graph_overhead_custom", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint ggml_graph_overhead_custom(nuint size, [MarshalAs(UnmanagedType.U1)] bool grads);

        [DllImport(__DllName, EntryPoint = "ggml_graph_plan", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_cplan ggml_graph_plan(ggml_cgraph* cgraph, int n_threads);

        [DllImport(__DllName, EntryPoint = "ggml_graph_compute", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_graph_compute(ggml_cgraph* cgraph, ggml_cplan* cplan);

        [DllImport(__DllName, EntryPoint = "ggml_graph_compute_with_ctx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_graph_compute_with_ctx(ggml_context* ctx, ggml_cgraph* cgraph, int n_threads);

        [DllImport(__DllName, EntryPoint = "ggml_graph_get_tensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_tensor* ggml_graph_get_tensor(ggml_cgraph* cgraph, byte* name);

        [DllImport(__DllName, EntryPoint = "ggml_graph_export", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_graph_export(ggml_cgraph* cgraph, byte* fname);

        [DllImport(__DllName, EntryPoint = "ggml_graph_import", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_cgraph* ggml_graph_import(byte* fname, ggml_context** ctx_data, ggml_context** ctx_eval);

        [DllImport(__DllName, EntryPoint = "ggml_graph_print", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_graph_print(ggml_cgraph* cgraph);

        [DllImport(__DllName, EntryPoint = "ggml_graph_dump_dot", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_graph_dump_dot(ggml_cgraph* gb, ggml_cgraph* gf, byte* filename);

        [DllImport(__DllName, EntryPoint = "ggml_build_backward_gradient_checkpointing", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_build_backward_gradient_checkpointing(ggml_context* ctx, ggml_cgraph* gf, ggml_cgraph* gb, ggml_cgraph* gb_tmp, ggml_tensor** checkpoints, int n_checkpoints);

        [DllImport(__DllName, EntryPoint = "ggml_opt_default_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_opt_params ggml_opt_default_params(uint type_);

        [DllImport(__DllName, EntryPoint = "ggml_opt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_opt(ggml_context* ctx, ggml_opt_params @params, ggml_tensor* f);

        [DllImport(__DllName, EntryPoint = "ggml_opt_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_opt_init(ggml_context* ctx, ggml_opt_context* opt, ggml_opt_params @params, long nx);

        [DllImport(__DllName, EntryPoint = "ggml_opt_resume", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_opt_resume(ggml_context* ctx, ggml_opt_context* opt, ggml_tensor* f);

        [DllImport(__DllName, EntryPoint = "ggml_opt_resume_g", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_opt_resume_g(ggml_context* ctx, ggml_opt_context* opt, ggml_tensor* f, ggml_cgraph* gf, ggml_cgraph* gb, delegate* unmanaged[Cdecl]<void*, int, float*, bool*, void> callback, void* callback_data);

        [DllImport(__DllName, EntryPoint = "ggml_set_input", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_set_input(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_set_output", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_set_output(ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "ggml_quantize_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_quantize_init(uint type_);

        [DllImport(__DllName, EntryPoint = "ggml_quantize_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ggml_quantize_free();

        [DllImport(__DllName, EntryPoint = "ggml_quantize_requires_imatrix", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool ggml_quantize_requires_imatrix(uint type_);

        [DllImport(__DllName, EntryPoint = "ggml_quantize_chunk", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint ggml_quantize_chunk(uint type_, float* src, void* dst, int start, int nrows, int n_per_row, float* imatrix);

        [DllImport(__DllName, EntryPoint = "gguf_init_empty", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern gguf_context* gguf_init_empty();

        [DllImport(__DllName, EntryPoint = "gguf_init_from_file", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern gguf_context* gguf_init_from_file(byte* fname, gguf_init_params @params);

        [DllImport(__DllName, EntryPoint = "gguf_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_free(gguf_context* ctx);

        [DllImport(__DllName, EntryPoint = "gguf_type_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* gguf_type_name(uint type_);

        [DllImport(__DllName, EntryPoint = "gguf_get_version", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int gguf_get_version(gguf_context* ctx);

        [DllImport(__DllName, EntryPoint = "gguf_get_alignment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint gguf_get_alignment(gguf_context* ctx);

        [DllImport(__DllName, EntryPoint = "gguf_get_data_offset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint gguf_get_data_offset(gguf_context* ctx);

        [DllImport(__DllName, EntryPoint = "gguf_get_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* gguf_get_data(gguf_context* ctx);

        [DllImport(__DllName, EntryPoint = "gguf_get_n_kv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int gguf_get_n_kv(gguf_context* ctx);

        [DllImport(__DllName, EntryPoint = "gguf_find_key", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int gguf_find_key(gguf_context* ctx, byte* key);

        [DllImport(__DllName, EntryPoint = "gguf_get_key", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* gguf_get_key(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_kv_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint gguf_get_kv_type(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_arr_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint gguf_get_arr_type(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_val_u8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte gguf_get_val_u8(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_val_i8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern sbyte gguf_get_val_i8(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_val_u16", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ushort gguf_get_val_u16(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_val_i16", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern short gguf_get_val_i16(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_val_u32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint gguf_get_val_u32(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_val_i32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int gguf_get_val_i32(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_val_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float gguf_get_val_f32(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_val_u64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ulong gguf_get_val_u64(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_val_i64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long gguf_get_val_i64(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_val_f64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double gguf_get_val_f64(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_val_bool", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool gguf_get_val_bool(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_val_str", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* gguf_get_val_str(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_val_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* gguf_get_val_data(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_arr_n", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int gguf_get_arr_n(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_arr_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* gguf_get_arr_data(gguf_context* ctx, int key_id);

        [DllImport(__DllName, EntryPoint = "gguf_get_arr_str", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* gguf_get_arr_str(gguf_context* ctx, int key_id, int i);

        [DllImport(__DllName, EntryPoint = "gguf_get_n_tensors", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int gguf_get_n_tensors(gguf_context* ctx);

        [DllImport(__DllName, EntryPoint = "gguf_find_tensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int gguf_find_tensor(gguf_context* ctx, byte* name);

        [DllImport(__DllName, EntryPoint = "gguf_get_tensor_offset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint gguf_get_tensor_offset(gguf_context* ctx, int i);

        [DllImport(__DllName, EntryPoint = "gguf_get_tensor_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* gguf_get_tensor_name(gguf_context* ctx, int i);

        [DllImport(__DllName, EntryPoint = "gguf_get_tensor_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern uint gguf_get_tensor_type(gguf_context* ctx, int i);

        [DllImport(__DllName, EntryPoint = "gguf_set_val_u8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_set_val_u8(gguf_context* ctx, byte* key, byte val);

        [DllImport(__DllName, EntryPoint = "gguf_set_val_i8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_set_val_i8(gguf_context* ctx, byte* key, sbyte val);

        [DllImport(__DllName, EntryPoint = "gguf_set_val_u16", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_set_val_u16(gguf_context* ctx, byte* key, ushort val);

        [DllImport(__DllName, EntryPoint = "gguf_set_val_i16", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_set_val_i16(gguf_context* ctx, byte* key, short val);

        [DllImport(__DllName, EntryPoint = "gguf_set_val_u32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_set_val_u32(gguf_context* ctx, byte* key, uint val);

        [DllImport(__DllName, EntryPoint = "gguf_set_val_i32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_set_val_i32(gguf_context* ctx, byte* key, int val);

        [DllImport(__DllName, EntryPoint = "gguf_set_val_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_set_val_f32(gguf_context* ctx, byte* key, float val);

        [DllImport(__DllName, EntryPoint = "gguf_set_val_u64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_set_val_u64(gguf_context* ctx, byte* key, ulong val);

        [DllImport(__DllName, EntryPoint = "gguf_set_val_i64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_set_val_i64(gguf_context* ctx, byte* key, long val);

        [DllImport(__DllName, EntryPoint = "gguf_set_val_f64", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_set_val_f64(gguf_context* ctx, byte* key, double val);

        [DllImport(__DllName, EntryPoint = "gguf_set_val_bool", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_set_val_bool(gguf_context* ctx, byte* key, [MarshalAs(UnmanagedType.U1)] bool val);

        [DllImport(__DllName, EntryPoint = "gguf_set_val_str", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_set_val_str(gguf_context* ctx, byte* key, byte* val);

        [DllImport(__DllName, EntryPoint = "gguf_set_arr_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_set_arr_data(gguf_context* ctx, byte* key, uint type_, void* data, int n);

        [DllImport(__DllName, EntryPoint = "gguf_set_arr_str", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_set_arr_str(gguf_context* ctx, byte* key, byte** data, int n);

        [DllImport(__DllName, EntryPoint = "gguf_set_kv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_set_kv(gguf_context* ctx, gguf_context* src);

        [DllImport(__DllName, EntryPoint = "gguf_add_tensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_add_tensor(gguf_context* ctx, ggml_tensor* tensor);

        [DllImport(__DllName, EntryPoint = "gguf_set_tensor_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_set_tensor_type(gguf_context* ctx, byte* name, uint type_);

        [DllImport(__DllName, EntryPoint = "gguf_set_tensor_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_set_tensor_data(gguf_context* ctx, byte* name, void* data, nuint size);

        [DllImport(__DllName, EntryPoint = "gguf_write_to_file", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_write_to_file(gguf_context* ctx, byte* fname, [MarshalAs(UnmanagedType.U1)] bool only_meta);

        [DllImport(__DllName, EntryPoint = "gguf_get_meta_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint gguf_get_meta_size(gguf_context* ctx);

        [DllImport(__DllName, EntryPoint = "gguf_get_meta_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void gguf_get_meta_data(gguf_context* ctx, void* data);

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_avx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_avx();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_avx_vnni", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_avx_vnni();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_avx2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_avx2();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_avx512", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_avx512();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_avx512_vbmi", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_avx512_vbmi();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_avx512_vnni", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_avx512_vnni();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_fma", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_fma();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_neon", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_neon();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_arm_fma", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_arm_fma();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_metal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_metal();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_f16c", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_f16c();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_fp16_va", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_fp16_va();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_wasm_simd", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_wasm_simd();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_blas", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_blas();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_cuda", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_cuda();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_clblast", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_clblast();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_vulkan", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_vulkan();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_kompute", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_kompute();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_gpublas", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_gpublas();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_sse3", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_sse3();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_ssse3", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_ssse3();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_sycl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_sycl();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_vsx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_vsx();

        [DllImport(__DllName, EntryPoint = "ggml_cpu_has_matmul_int8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ggml_cpu_has_matmul_int8();

        [DllImport(__DllName, EntryPoint = "ggml_internal_get_type_traits", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ggml_type_traits_t ggml_internal_get_type_traits(uint type_);

        [DllImport(__DllName, EntryPoint = "whisper_init_from_file_with_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_context* whisper_init_from_file_with_params(byte* path_model, whisper_context_params @params);

        [DllImport(__DllName, EntryPoint = "whisper_init_from_buffer_with_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_context* whisper_init_from_buffer_with_params(void* buffer, nuint buffer_size, whisper_context_params @params);

        [DllImport(__DllName, EntryPoint = "whisper_init_with_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_context* whisper_init_with_params(whisper_model_loader* loader, whisper_context_params @params);

        [DllImport(__DllName, EntryPoint = "whisper_init_from_file_with_params_no_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_context* whisper_init_from_file_with_params_no_state(byte* path_model, whisper_context_params @params);

        [DllImport(__DllName, EntryPoint = "whisper_init_from_buffer_with_params_no_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_context* whisper_init_from_buffer_with_params_no_state(void* buffer, nuint buffer_size, whisper_context_params @params);

        [DllImport(__DllName, EntryPoint = "whisper_init_with_params_no_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_context* whisper_init_with_params_no_state(whisper_model_loader* loader, whisper_context_params @params);

        [DllImport(__DllName, EntryPoint = "whisper_init_from_file", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_context* whisper_init_from_file(byte* path_model);

        [DllImport(__DllName, EntryPoint = "whisper_init_from_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_context* whisper_init_from_buffer(void* buffer, nuint buffer_size);

        [DllImport(__DllName, EntryPoint = "whisper_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_context* whisper_init(whisper_model_loader* loader);

        [DllImport(__DllName, EntryPoint = "whisper_init_from_file_no_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_context* whisper_init_from_file_no_state(byte* path_model);

        [DllImport(__DllName, EntryPoint = "whisper_init_from_buffer_no_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_context* whisper_init_from_buffer_no_state(void* buffer, nuint buffer_size);

        [DllImport(__DllName, EntryPoint = "whisper_init_no_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_context* whisper_init_no_state(whisper_model_loader* loader);

        [DllImport(__DllName, EntryPoint = "whisper_init_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_state* whisper_init_state(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_ctx_init_openvino_encoder", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_ctx_init_openvino_encoder(whisper_context* ctx, byte* model_path, byte* device, byte* cache_dir);

        [DllImport(__DllName, EntryPoint = "whisper_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void whisper_free(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_free_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void whisper_free_state(whisper_state* state);

        [DllImport(__DllName, EntryPoint = "whisper_free_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void whisper_free_params(whisper_full_params* @params);

        [DllImport(__DllName, EntryPoint = "whisper_free_context_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void whisper_free_context_params(whisper_context_params* @params);

        [DllImport(__DllName, EntryPoint = "whisper_pcm_to_mel", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_pcm_to_mel(whisper_context* ctx, float* samples, int n_samples, int n_threads);

        [DllImport(__DllName, EntryPoint = "whisper_pcm_to_mel_with_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_pcm_to_mel_with_state(whisper_context* ctx, whisper_state* state, float* samples, int n_samples, int n_threads);

        [DllImport(__DllName, EntryPoint = "whisper_pcm_to_mel_phase_vocoder", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_pcm_to_mel_phase_vocoder(whisper_context* ctx, float* samples, int n_samples, int n_threads);

        [DllImport(__DllName, EntryPoint = "whisper_pcm_to_mel_phase_vocoder_with_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_pcm_to_mel_phase_vocoder_with_state(whisper_context* ctx, whisper_state* state, float* samples, int n_samples, int n_threads);

        [DllImport(__DllName, EntryPoint = "whisper_set_mel", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_set_mel(whisper_context* ctx, float* data, int n_len, int n_mel);

        [DllImport(__DllName, EntryPoint = "whisper_set_mel_with_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_set_mel_with_state(whisper_context* ctx, whisper_state* state, float* data, int n_len, int n_mel);

        [DllImport(__DllName, EntryPoint = "whisper_encode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_encode(whisper_context* ctx, int offset, int n_threads);

        [DllImport(__DllName, EntryPoint = "whisper_encode_with_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_encode_with_state(whisper_context* ctx, whisper_state* state, int offset, int n_threads);

        [DllImport(__DllName, EntryPoint = "whisper_decode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_decode(whisper_context* ctx, int* tokens, int n_tokens, int n_past, int n_threads);

        [DllImport(__DllName, EntryPoint = "whisper_decode_with_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_decode_with_state(whisper_context* ctx, whisper_state* state, int* tokens, int n_tokens, int n_past, int n_threads);

        [DllImport(__DllName, EntryPoint = "whisper_tokenize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_tokenize(whisper_context* ctx, byte* text, int* tokens, int n_max_tokens);

        [DllImport(__DllName, EntryPoint = "whisper_token_count", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_token_count(whisper_context* ctx, byte* text);

        [DllImport(__DllName, EntryPoint = "whisper_lang_max_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_lang_max_id();

        [DllImport(__DllName, EntryPoint = "whisper_lang_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_lang_id(byte* lang);

        [DllImport(__DllName, EntryPoint = "whisper_lang_str", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* whisper_lang_str(int id);

        [DllImport(__DllName, EntryPoint = "whisper_lang_str_full", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* whisper_lang_str_full(int id);

        [DllImport(__DllName, EntryPoint = "whisper_lang_auto_detect", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_lang_auto_detect(whisper_context* ctx, int offset_ms, int n_threads, float* lang_probs);

        [DllImport(__DllName, EntryPoint = "whisper_lang_auto_detect_with_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_lang_auto_detect_with_state(whisper_context* ctx, whisper_state* state, int offset_ms, int n_threads, float* lang_probs);

        [DllImport(__DllName, EntryPoint = "whisper_n_len", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_n_len(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_n_len_from_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_n_len_from_state(whisper_state* state);

        [DllImport(__DllName, EntryPoint = "whisper_n_vocab", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_n_vocab(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_n_text_ctx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_n_text_ctx(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_n_audio_ctx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_n_audio_ctx(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_is_multilingual", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_is_multilingual(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_model_n_vocab", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_model_n_vocab(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_model_n_audio_ctx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_model_n_audio_ctx(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_model_n_audio_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_model_n_audio_state(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_model_n_audio_head", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_model_n_audio_head(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_model_n_audio_layer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_model_n_audio_layer(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_model_n_text_ctx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_model_n_text_ctx(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_model_n_text_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_model_n_text_state(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_model_n_text_head", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_model_n_text_head(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_model_n_text_layer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_model_n_text_layer(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_model_n_mels", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_model_n_mels(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_model_ftype", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_model_ftype(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_model_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_model_type(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_get_logits", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float* whisper_get_logits(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_get_logits_from_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float* whisper_get_logits_from_state(whisper_state* state);

        [DllImport(__DllName, EntryPoint = "whisper_token_to_str", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* whisper_token_to_str(whisper_context* ctx, int token);

        [DllImport(__DllName, EntryPoint = "whisper_model_type_readable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* whisper_model_type_readable(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_token_eot", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_token_eot(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_token_sot", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_token_sot(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_token_solm", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_token_solm(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_token_prev", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_token_prev(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_token_nosp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_token_nosp(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_token_not", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_token_not(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_token_beg", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_token_beg(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_token_lang", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_token_lang(whisper_context* ctx, int lang_id);

        [DllImport(__DllName, EntryPoint = "whisper_token_translate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_token_translate(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_token_transcribe", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_token_transcribe(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_print_timings", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void whisper_print_timings(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_reset_timings", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void whisper_reset_timings(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_print_system_info", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* whisper_print_system_info();

        [DllImport(__DllName, EntryPoint = "whisper_context_default_params_by_ref", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_context_params* whisper_context_default_params_by_ref();

        [DllImport(__DllName, EntryPoint = "whisper_context_default_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_context_params whisper_context_default_params();

        [DllImport(__DllName, EntryPoint = "whisper_full_default_params_by_ref", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_full_params* whisper_full_default_params_by_ref(uint strategy);

        [DllImport(__DllName, EntryPoint = "whisper_full_default_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_full_params whisper_full_default_params(uint strategy);

        [DllImport(__DllName, EntryPoint = "whisper_full", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_full(whisper_context* ctx, whisper_full_params @params, float* samples, int n_samples);

        [DllImport(__DllName, EntryPoint = "whisper_full_with_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_full_with_state(whisper_context* ctx, whisper_state* state, whisper_full_params @params, float* samples, int n_samples);

        [DllImport(__DllName, EntryPoint = "whisper_full_parallel", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_full_parallel(whisper_context* ctx, whisper_full_params @params, float* samples, int n_samples, int n_processors);

        [DllImport(__DllName, EntryPoint = "whisper_full_n_segments", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_full_n_segments(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_full_n_segments_from_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_full_n_segments_from_state(whisper_state* state);

        [DllImport(__DllName, EntryPoint = "whisper_full_lang_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_full_lang_id(whisper_context* ctx);

        [DllImport(__DllName, EntryPoint = "whisper_full_lang_id_from_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_full_lang_id_from_state(whisper_state* state);

        [DllImport(__DllName, EntryPoint = "whisper_full_get_segment_t0", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long whisper_full_get_segment_t0(whisper_context* ctx, int i_segment);

        [DllImport(__DllName, EntryPoint = "whisper_full_get_segment_t0_from_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long whisper_full_get_segment_t0_from_state(whisper_state* state, int i_segment);

        [DllImport(__DllName, EntryPoint = "whisper_full_get_segment_t1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long whisper_full_get_segment_t1(whisper_context* ctx, int i_segment);

        [DllImport(__DllName, EntryPoint = "whisper_full_get_segment_t1_from_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern long whisper_full_get_segment_t1_from_state(whisper_state* state, int i_segment);

        [DllImport(__DllName, EntryPoint = "whisper_full_get_segment_speaker_turn_next", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool whisper_full_get_segment_speaker_turn_next(whisper_context* ctx, int i_segment);

        [DllImport(__DllName, EntryPoint = "whisper_full_get_segment_speaker_turn_next_from_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool whisper_full_get_segment_speaker_turn_next_from_state(whisper_state* state, int i_segment);

        [DllImport(__DllName, EntryPoint = "whisper_full_get_segment_text", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* whisper_full_get_segment_text(whisper_context* ctx, int i_segment);

        [DllImport(__DllName, EntryPoint = "whisper_full_get_segment_text_from_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* whisper_full_get_segment_text_from_state(whisper_state* state, int i_segment);

        [DllImport(__DllName, EntryPoint = "whisper_full_n_tokens", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_full_n_tokens(whisper_context* ctx, int i_segment);

        [DllImport(__DllName, EntryPoint = "whisper_full_n_tokens_from_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_full_n_tokens_from_state(whisper_state* state, int i_segment);

        [DllImport(__DllName, EntryPoint = "whisper_full_get_token_text", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* whisper_full_get_token_text(whisper_context* ctx, int i_segment, int i_token);

        [DllImport(__DllName, EntryPoint = "whisper_full_get_token_text_from_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* whisper_full_get_token_text_from_state(whisper_context* ctx, whisper_state* state, int i_segment, int i_token);

        [DllImport(__DllName, EntryPoint = "whisper_full_get_token_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_full_get_token_id(whisper_context* ctx, int i_segment, int i_token);

        [DllImport(__DllName, EntryPoint = "whisper_full_get_token_id_from_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_full_get_token_id_from_state(whisper_state* state, int i_segment, int i_token);

        [DllImport(__DllName, EntryPoint = "whisper_full_get_token_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_token_data whisper_full_get_token_data(whisper_context* ctx, int i_segment, int i_token);

        [DllImport(__DllName, EntryPoint = "whisper_full_get_token_data_from_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern whisper_token_data whisper_full_get_token_data_from_state(whisper_state* state, int i_segment, int i_token);

        [DllImport(__DllName, EntryPoint = "whisper_full_get_token_p", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float whisper_full_get_token_p(whisper_context* ctx, int i_segment, int i_token);

        [DllImport(__DllName, EntryPoint = "whisper_full_get_token_p_from_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float whisper_full_get_token_p_from_state(whisper_state* state, int i_segment, int i_token);

        [DllImport(__DllName, EntryPoint = "whisper_bench_memcpy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_bench_memcpy(int n_threads);

        [DllImport(__DllName, EntryPoint = "whisper_bench_memcpy_str", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* whisper_bench_memcpy_str(int n_threads);

        [DllImport(__DllName, EntryPoint = "whisper_bench_ggml_mul_mat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int whisper_bench_ggml_mul_mat(int n_threads);

        [DllImport(__DllName, EntryPoint = "whisper_bench_ggml_mul_mat_str", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* whisper_bench_ggml_mul_mat_str(int n_threads);

        [DllImport(__DllName, EntryPoint = "whisper_log_set", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void whisper_log_set(delegate* unmanaged[Cdecl]<uint, byte*, void*, void> log_callback, void* user_data);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct __sbuf
    {
        public byte* _base;
        public int _size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct __sFILEX
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct __sFILE
    {
        public byte* _p;
        public int _r;
        public int _w;
        public short _flags;
        public short _file;
        public __sbuf _bf;
        public int _lbfsize;
        public void* _cookie;
        public delegate* unmanaged[Cdecl]<void*, int> _close;
        public delegate* unmanaged[Cdecl]<void*, byte*, int, int> _read;
        public delegate* unmanaged[Cdecl]<void*, long, int, long> _seek;
        public delegate* unmanaged[Cdecl]<void*, byte*, int, int> _write;
        public __sbuf _ub;
        public __sFILEX* _extra;
        public int _ur;
        public fixed byte _ubuf[3];
        public fixed byte _nbuf[1];
        public __sbuf _lb;
        public int _blksize;
        public long _offset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ggml_context
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ggml_object
    {
        public nuint offs;
        public nuint size;
        public ggml_object* next;
        public uint type_;
        public fixed byte padding[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ggml_tensor
    {
        public uint type_;
        public uint backend;
        public ggml_backend_buffer* buffer;
        public fixed long ne[4];
        public fixed byte/* nuint, this length is invalid so must keep pointer and can't edit from C# */ nb[4];
        public uint op;
        public fixed int op_params[16];
        public int flags;
        public ggml_tensor* grad;
        public fixed byte/* ggml_tensor, this length is invalid so must keep pointer and can't edit from C# */ src[10];
        public int perf_runs;
        public long perf_cycles;
        public long perf_time_us;
        public ggml_tensor* view_src;
        public nuint view_offs;
        public void* data;
        public fixed byte name[64];
        public void* extra;
        public fixed byte padding[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ggml_cplan
    {
        public nuint work_size;
        public byte* work_data;
        public int n_threads;
        public delegate* unmanaged[Cdecl]<void*, bool> abort_callback;
        public void* abort_callback_data;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ggml_hash_set
    {
        public nuint size;
        public ggml_tensor** keys;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ggml_cgraph
    {
        public int size;
        public int n_nodes;
        public int n_leafs;
        public ggml_tensor** nodes;
        public ggml_tensor** grads;
        public ggml_tensor** leafs;
        public ggml_hash_set visited_hash_table;
        public uint order;
        public int perf_runs;
        public long perf_cycles;
        public long perf_time_us;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ggml_scratch
    {
        public nuint offs;
        public nuint size;
        public void* data;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ggml_init_params
    {
        public nuint mem_size;
        public void* mem_buffer;
        [MarshalAs(UnmanagedType.U1)] public bool no_alloc;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ggml_opt_params
    {
        public uint type_;
        public nuint graph_size;
        public int n_threads;
        public int past;
        public float delta;
        public int max_no_improvement;
        [MarshalAs(UnmanagedType.U1)] public bool print_forward_graph;
        [MarshalAs(UnmanagedType.U1)] public bool print_backward_graph;
        public int n_gradient_accumulation;
        public ggml_opt_params__bindgen_ty_1 adam;
        public ggml_opt_params__bindgen_ty_2 lbfgs;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ggml_opt_params__bindgen_ty_1
    {
        public int n_iter;
        public float sched;
        public float decay;
        public int decay_min_ndim;
        public float alpha;
        public float beta1;
        public float beta2;
        public float eps;
        public float eps_f;
        public float eps_g;
        public float gclip;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ggml_opt_params__bindgen_ty_2
    {
        public int m;
        public int n_iter;
        public int max_linesearch;
        public float eps;
        public float ftol;
        public float wolfe;
        public float min_step;
        public float max_step;
        public uint linesearch;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ggml_opt_context
    {
        public ggml_context* ctx;
        public ggml_opt_params @params;
        public int iter;
        public long nx;
        [MarshalAs(UnmanagedType.U1)] public bool just_initialized;
        public float loss_before;
        public float loss_after;
        public ggml_opt_context__bindgen_ty_1 adam;
        public ggml_opt_context__bindgen_ty_2 lbfgs;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ggml_opt_context__bindgen_ty_1
    {
        public ggml_tensor* g;
        public ggml_tensor* m;
        public ggml_tensor* v;
        public ggml_tensor* pf;
        public float fx_best;
        public float fx_prev;
        public int n_no_improvement;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ggml_opt_context__bindgen_ty_2
    {
        public ggml_tensor* x;
        public ggml_tensor* xp;
        public ggml_tensor* g;
        public ggml_tensor* gp;
        public ggml_tensor* d;
        public ggml_tensor* pf;
        public ggml_tensor* lmal;
        public ggml_tensor* lmys;
        public ggml_tensor* lms;
        public ggml_tensor* lmy;
        public float fx_best;
        public float step;
        public int j;
        public int k;
        public int end;
        public int n_no_improvement;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct gguf_context
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct gguf_init_params
    {
        [MarshalAs(UnmanagedType.U1)] public bool no_alloc;
        public ggml_context** ctx;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ggml_type_traits_t
    {
        public byte* type_name;
        public int blck_size;
        public nuint type_size;
        [MarshalAs(UnmanagedType.U1)] public bool is_quantized;
        public delegate* unmanaged[Cdecl]<void*, float*, int, void> to_float;
        public delegate* unmanaged[Cdecl]<float*, void*, int, void> from_float;
        public delegate* unmanaged[Cdecl]<float*, void*, int, void> from_float_reference;
        public delegate* unmanaged[Cdecl]<int, float*, nuint, void*, nuint, void*, nuint, int, void> vec_dot;
        public uint vec_dot_type;
        public long nrows;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct whisper_context
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct whisper_state
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct whisper_ahead
    {
        public int n_text_layer;
        public int n_head;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct whisper_aheads
    {
        public nuint n_heads;
        public whisper_ahead* heads;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct whisper_context_params
    {
        [MarshalAs(UnmanagedType.U1)] public bool use_gpu;
        public int gpu_device;
        [MarshalAs(UnmanagedType.U1)] public bool dtw_token_timestamps;
        public uint dtw_aheads_preset;
        public int dtw_n_top;
        public whisper_aheads dtw_aheads;
        public nuint dtw_mem_size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct whisper_token_data
    {
        public int id;
        public int tid;
        public float p;
        public float plog;
        public float pt;
        public float ptsum;
        public long t0;
        public long t1;
        public long t_dtw;
        public float vlen;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct whisper_model_loader
    {
        public void* context;
        public delegate* unmanaged[Cdecl]<void*, void*, nuint, nuint> read;
        public delegate* unmanaged[Cdecl]<void*, bool> eof;
        public delegate* unmanaged[Cdecl]<void*, void> close;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct whisper_grammar_element
    {
        public uint type_;
        public uint value;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct whisper_full_params
    {
        public uint strategy;
        public int n_threads;
        public int n_max_text_ctx;
        public int offset_ms;
        public int duration_ms;
        [MarshalAs(UnmanagedType.U1)] public bool translate;
        [MarshalAs(UnmanagedType.U1)] public bool no_context;
        [MarshalAs(UnmanagedType.U1)] public bool no_timestamps;
        [MarshalAs(UnmanagedType.U1)] public bool single_segment;
        [MarshalAs(UnmanagedType.U1)] public bool print_special;
        [MarshalAs(UnmanagedType.U1)] public bool print_progress;
        [MarshalAs(UnmanagedType.U1)] public bool print_realtime;
        [MarshalAs(UnmanagedType.U1)] public bool print_timestamps;
        [MarshalAs(UnmanagedType.U1)] public bool token_timestamps;
        public float thold_pt;
        public float thold_ptsum;
        public int max_len;
        [MarshalAs(UnmanagedType.U1)] public bool split_on_word;
        public int max_tokens;
        [MarshalAs(UnmanagedType.U1)] public bool speed_up;
        [MarshalAs(UnmanagedType.U1)] public bool debug_mode;
        public int audio_ctx;
        [MarshalAs(UnmanagedType.U1)] public bool tdrz_enable;
        public byte* initial_prompt;
        public int* prompt_tokens;
        public int prompt_n_tokens;
        public byte* language;
        [MarshalAs(UnmanagedType.U1)] public bool detect_language;
        [MarshalAs(UnmanagedType.U1)] public bool suppress_blank;
        [MarshalAs(UnmanagedType.U1)] public bool suppress_non_speech_tokens;
        public float temperature;
        public float max_initial_ts;
        public float length_penalty;
        public float temperature_inc;
        public float entropy_thold;
        public float logprob_thold;
        public float no_speech_thold;
        public whisper_full_params__bindgen_ty_1 greedy;
        public whisper_full_params__bindgen_ty_2 beam_search;
        public delegate* unmanaged[Cdecl]<whisper_context*, whisper_state*, int, void*, void> new_segment_callback;
        public void* new_segment_callback_user_data;
        public delegate* unmanaged[Cdecl]<whisper_context*, whisper_state*, int, void*, void> progress_callback;
        public void* progress_callback_user_data;
        public delegate* unmanaged[Cdecl]<whisper_context*, whisper_state*, void*, bool> encoder_begin_callback;
        public void* encoder_begin_callback_user_data;
        public delegate* unmanaged[Cdecl]<void*, bool> abort_callback;
        public void* abort_callback_user_data;
        public delegate* unmanaged[Cdecl]<whisper_context*, whisper_state*, whisper_token_data*, int, float*, void*, void> logits_filter_callback;
        public void* logits_filter_callback_user_data;
        public whisper_grammar_element** grammar_rules;
        public nuint n_grammar_rules;
        public nuint i_start_rule;
        public float grammar_penalty;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct whisper_full_params__bindgen_ty_1
    {
        public int best_of;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct whisper_full_params__bindgen_ty_2
    {
        public int beam_size;
        public float patience;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ggml_backend_buffer
    {
        public byte _address;
    }



}
